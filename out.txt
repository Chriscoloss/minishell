
#include "./../../include/minishell.h"

void	expand(t_exp_p *p, t_expand_ctx *ctx)
{
	char				*res;
	char				*exp_res;
	size_t				i;
	int					escaped;
	t_expand_data		data;

	i = p->start;
	escaped = 0;
	data = (t_expand_data){&res, &exp_res, p->str, p->expmap, &i, &escaped, p};
	if (initialize_expansion(&data) == -1)
		return ;
	ctx = &((t_expand_ctx){p->m, &res, &exp_res, p->str, p->expmap, &i, 0});
	while (i < p->end)
	{
		if (process_character(&data, ctx) == -1)
			return ;
	}
	finalize_expansion(&data);
}


#include "./../../include/minishell.h"

void	ft_strfillcat(char *dest, const char *src, char fill_char)
{
	char	*dest_end;
	size_t	src_len;
	size_t	i;

	dest_end = dest + ft_strlen(dest);
	src_len = ft_strlen(src);
	i = 0;
	while (i < src_len)
	{
		dest_end[i] = fill_char;
		i++;
	}
	dest_end[src_len] = '\0';
}

char	*get_var_name_exp(const char *str, const char *expmap, size_t *pos)
{
	size_t	start;
	size_t	end;
	char	*var_name;

	start = *pos + 1;
	end = start;
	while (str[end] && ft_strchr(VS, str[end])
		&& (expmap[end] == expmap[start]))
		end++;
	if (end == start)
		return (NULL);
	var_name = malloc(end - start + 1);
	if (!var_name)
		return (NULL);
	ft_strncpy(var_name, &str[start], end - start);
	var_name[end - start] = '\0';
	*pos = end;
	return (var_name);
}

char	*get_var_name(const char *str, size_t *pos)
{
	size_t	start;
	size_t	end;
	char	*var_name;

	start = *pos + 1;
	end = start;
	while (str[end] && ft_strchr(VS, str[end]))
		end++;
	if (end == start)
		return (NULL);
	var_name = malloc(end - start + 1);
	if (!var_name)
		return (NULL);
	ft_strncpy(var_name, &str[start], end - start);
	var_name[end - start] = '\0';
	*pos = end;
	return (var_name);
}


#include "./../../include/minishell.h"

void	init_exp(t_exp *exp)
{
	if (exp->result)
	{
		free(exp->result);
		exp->result = NULL;
	}
	if (exp->expmap_result)
	{
		free(exp->expmap_result);
		exp->expmap_result = NULL;
	}
	exp->result = NULL;
	exp->expmap_result = NULL;
}

void	handle_unexpanded_part(t_exp *exp)
{
	char	*temp;
	size_t	result_len;
	size_t	part_len;

	result_len = ft_strlen(exp->result);
	part_len = exp->end - exp->start;
	temp = ft_calloc(result_len + part_len + 1, sizeof(char));
	if (!temp)
		return ;
	ft_strlcpy(temp, exp->result, result_len + 1);
	free(exp->result);
	exp->result = temp;
	ft_strncat(exp->result, &exp->str[exp->start], part_len);
}

void	init_exp_data(t_exp_data *data)
{
	data->expanded = NULL;
	data->expanded_map = NULL;
	data->temp = NULL;
	data->expmap_temp = NULL;
}

void	setup_expand_params(t_exp *exp, t_exp_p *params, t_exp_data *data)
{
	params->m = exp->m;
	params->expanded = &data->expanded;
	params->expanded_map = &data->expanded_map;
	params->str = &exp->str[exp->start];
	params->expmap = &exp->expmap[exp->start];
	params->start = 0;
	params->end = exp->end - exp->start;
}

int	allocate_temp_memory(t_exp *e, t_exp_data *d)
{
	size_t	len;

	len = ft_strlen(e->result) + ft_strlen(d->expanded) + 1;
	d->temp = ft_calloc(len, sizeof(char));
	if (!d->temp)
		return (-1);
	return (0);
}


#include "./../../include/minishell.h"

int	allocate_expmap_temp_memory(t_exp *exp, t_exp_data *data)
{
	size_t	len;

	len = ft_strlen(exp->expmap_result) + ft_strlen(data->expanded_map) + 1;
	data->expmap_temp = ft_calloc(len, sizeof(char));
	if (!data->expmap_temp)
		return (-1);
	return (0);
}

void	update_result(t_exp *exp, t_exp_data *data)
{
	ft_strlcpy(data->temp, exp->result, ft_strlen(exp->result) + 1);
	free(exp->result);
	exp->result = data->temp;
	ft_strcat(exp->result, data->expanded);
}

void	update_expmap_result(t_exp *exp, t_exp_data *data)
{
	size_t	len;

	len = ft_strlen(exp->expmap_result) + 1;
	ft_strlcpy(data->expmap_temp, exp->expmap_result, len);
	free(exp->expmap_result);
	exp->expmap_result = data->expmap_temp;
	ft_strcat(exp->expmap_result, data->expanded_map);
}

void	cleanup_expansion_data(t_exp_data *data)
{
	free(data->expanded);
	free(data->expanded_map);
}

void	handle_expanded_part(t_exp *exp)
{
	t_exp_data		data;
	t_exp_p			params;
	t_expand_ctx	*ctx;

	ctx = NULL;
	init_exp_data(&data);
	setup_expand_params(exp, &params, &data);
	expand(&params, ctx);
	if (data.expanded && data.expanded_map)
	{
		if (allocate_temp_memory(exp, &data) == -1)
		{
			cleanup_expansion_data(&data);
			return ;
		}
		update_result(exp, &data);
		if (allocate_expmap_temp_memory(exp, &data) == -1)
		{
			free(data.temp);
			cleanup_expansion_data(&data);
			return ;
		}
		update_expmap_result(exp, &data);
	}
	cleanup_expansion_data(&data);
}


#include "./../../include/minishell.h"

void	process_token(t_exp *e)
{
	size_t	i;
	char	c;

	i = 0;
	while (i < ft_strlen(e->token->str))
	{
		if (e->token->expmap[i] == '1')
		{
			e->start = i;
			while (i < ft_strlen(e->token->str) && e->token->expmap[i] == '1')
				i++;
			e->end = i;
			handle_unexpanded_part(e);
		}
		else
		{
			e->start = i;
			c = e->token->expmap[i];
			while (i < ft_strlen(e->token->str) && e->token->expmap[i] == c)
				i++;
			e->end = i;
			handle_expanded_part(e);
		}
	}
}
void expand_token(t_minishell *m, t_token *token)
{
    t_exp exp;

    if (!token || !token->str || !token->expmap)
        return;

    exp.result = NULL;
    exp.expmap_result = NULL;
    exp.m = m;
    exp.token = token;
    exp.str = token->str;
    exp.expmap = token->expmap;

    // ft_printf("Before init_exp:\n");
    // ft_printf("token->str: %p (%s)\n", token->str, token->str);
    // ft_printf("token->expmap: %p (%s)\n", token->expmap, token->expmap);

    init_exp(&exp);

    // ft_printf("After init_exp:\n");
    // ft_printf("exp.result: %p\n", exp.result);
    // ft_printf("exp.expmap_result: %p\n", exp.expmap_result);

    if (!exp.result || !exp.expmap_result) {
        free(exp.result);
        free(exp.expmap_result);
        return;
    }

    process_token(&exp);

    // ft_printf("After process_token:\n");
    // ft_printf("exp.result: %p (%s)\n", exp.result, exp.result);
    // ft_printf("exp.expmap_result: %p (%s)\n", exp.expmap_result, exp.expmap_result);

    free(token->str);
    free(token->expmap);

    token->str = exp.result;
    token->expmap = exp.expmap_result;

    // ft_printf("After assigning to token:\n");
    // ft_printf("token->str: %p (%s)\n", token->str, token->str);
    // ft_printf("token->expmap: %p (%s)\n", token->expmap, token->expmap);

}

int	expmapcheck(char *expmap, const char *str, int i, int escaped)
{
	if (expmap[i + 1] != '\0' && str[i + 1] != '\0' && !escaped)
	{
		if (expmap[i] == '0'
			&& expmap[i + 1] == '2'
			&& str[i + 1] == '\"')
			return (2);
		if (expmap[i + 2] != '\0'
			&& str[i + 2] != '\0'
			&& expmap[i + 1] == '0'
			&& expmap[i + 2] == '2'
			&& str[i + 1] == '\"')
			return (2);
		else if ((expmap[i] == '0' || expmap[i] == '2')
			&& expmap[i] == expmap[i + 1])
			return (1);
	}
	return (0);
}

void	expcn(char **res, char **exp_res, char **var_name, char **exit_stats)
{
	if (res && *res)
	{
		free(*res);
		*res = NULL;
	}
	if (exp_res && *exp_res)
	{
		free(*exp_res);
		*exp_res = NULL;
	}
	if (var_name && *var_name)
	{
		free(*var_name);
		*var_name = NULL;
	}
	if (exit_stats && *exit_stats)
	{
		free(*exit_stats);
		*exit_stats = NULL;
	}
}

int	initialize_expansion(t_expand_data *d)
{
	*(d->res) = ft_calloc(1, sizeof(char));
	*(d->exp_res) = ft_calloc(1, sizeof(char));
	if (!*(d->res) || !*(d->exp_res))
	{
		expcn(d->res, d->exp_res,
			d->params->expanded, d->params->expanded_map);
		return (-1);
	}
	return (0);
}


#include "./../../include/minishell.h"

int	handle_dollar_sign(t_expand_data *data, t_expand_ctx *ctx)
{
	int	ret;
	int	check;

	check = expmapcheck(data->expmap, data->str, *(data->i), *(data->escaped));
	if (data->str[*(data->i) + 1] == '?' && check == 1)
	{
		ret = handle_exit_status(data->params->m, data->res, data->exp_res);
		if (ret == -1)
			return (-1);
		*(data->i) += ret;
	}
	else if (check == 2)
		*(data->i) += 2;
	else if (check == 1)
	{
		ctx->var_start = *(data->i);
		ret = handle_variable(ctx);
		if (ret == -1)
			return (-1);
	}
	return (0);
}

int	handle_escape_character(t_expand_data *d)
{
	int	ret;

	ret = handle_escape(d->res, d->exp_res, d->escaped);
	if (ret == -1)
	{
		expcn(d->res, d->exp_res, d->params->expanded, d->params->expanded_map);
		return (-1);
	}
	if (ret > 0)
	{
		*(d->i) += ret;
	}
	return (0);
}

int	append_regular_character(t_expand_data *data)
{
	char	*temp;
	char	*exp_tmp;

	temp = ft_calloc(ft_strlen(*(data->res)) + 2, sizeof(char));
	exp_tmp = ft_calloc(ft_strlen(*(data->exp_res)) + 2, sizeof(char));
	if (!temp || !exp_tmp)
	{
		expcn(data->res, data->exp_res, NULL, NULL);
		return (-1);
	}
	ft_strlcpy(temp, *(data->res), ft_strlen(*(data->res)) + 1);
	ft_strlcpy(exp_tmp, *(data->exp_res), ft_strlen(*(data->exp_res)) + 1);
	free(*(data->res));
	free(*(data->exp_res));
	*(data->res) = temp;
	*(data->exp_res) = exp_tmp;
	ft_strncat(*(data->res), &(data->str[*(data->i)]), 1);
	ft_strncat(*(data->exp_res), &(data->expmap[*(data->i)]), 1);
	return (0);
}

int process_character(t_expand_data *data, t_expand_ctx *ctx)
{
    int ret;

    ft_printf("DEBUG: Before processing character at index %zu\n", *(data->i));
    ft_printf("Current data->res: %p (%s)\n", *(data->res), *(data->res));
    ft_printf("Current data->exp_res: %p (%s)\n", *(data->exp_res), *(data->exp_res));

    if (data->expmap[*(data->i)] == 'S') {
        (*(data->i))++;
        return (0);
    }

    if (data->str[*(data->i)] == '\\') {
        return (handle_escape_character(data));
    }

    ret = expmapcheck(data->expmap, data->str, *(data->i), *(data->escaped));
    if (data->str[*(data->i)] == '$' && ret != 0) {
        return (handle_dollar_sign(data, ctx));
    }

    if (data->str[*(data->i)] != '"') {
        ret = append_regular_character(data);
        if (ret == 0) {
            (*(data->i))++;
        }
        return (ret);
    }

    (*(data->i))++;

    ft_printf("DEBUG: After processing character at index %zu\n", *(data->i));
    ft_printf("Updated data->res: %p (%s)\n", *(data->res), *(data->res));
    ft_printf("Updated data->exp_res: %p (%s)\n", *(data->exp_res), *(data->exp_res));

    return (0);
}

void finalize_expansion(t_expand_data *data)
{
    ft_printf("DEBUG: Finalizing expansion\n");
    ft_printf("Final res: %p (%s)\n", *(data->res), *(data->res));
    ft_printf("Final exp_res: %p (%s)\n", *(data->exp_res), *(data->exp_res));

    *(data->params->expanded) = *(data->res);
    *(data->params->expanded_map) = *(data->exp_res);
}


#include "./../../include/minishell.h"

static int	append_str(char **dst, const char *src)
{
	char	*temp;
	size_t	dst_len;
	size_t	src_len;

	if (!dst || !*dst || !src)
		return (0);
	dst_len = ft_strlen(*dst);
	src_len = ft_strlen(src);
	temp = ft_calloc(dst_len + src_len + 1, sizeof(char));
	if (!temp)
		return (0);
	ft_strlcpy(temp, *dst, dst_len + 1);
	ft_strlcat(temp, src, dst_len + src_len + 1);
	free(*dst);
	*dst = temp;
	return (1);
}

static int	append_char(char **dst, char c)
{
	char	*temp;
	size_t	len;

	if (!dst || !*dst)
		return (0);
	len = ft_strlen(*dst);
	temp = ft_calloc(len + 2, sizeof(char));
	if (!temp)
		return (0);
	ft_strlcpy(temp, *dst, len + 1);
	temp[len] = c;
	free(*dst);
	*dst = temp;
	return (1);
}

static char	*expand_exit_status(t_minishell *m, char **result)
{
	char	*exit_status_str;

	exit_status_str = ft_itoa(m->last_exitcode);
	if (!exit_status_str || !append_str(result, exit_status_str))
	{
		free(exit_status_str);
		free(*result);
		return (NULL);
	}
	free(exit_status_str);
	return (*result);
}

char	*expand_var(t_minishell *m, char *str, size_t *i, char **result)
{
	char	*var_name;
	char	*var_value;

	var_name = get_var_name(str, i);
	if (var_name)
	{
		var_value = my_getenv(var_name, m->env_list);
		if (var_value && !append_str(result, var_value))
		{
			free(var_name);
			free(*result);
			return (NULL);
		}
		free(var_name);
	}
	else if (!append_char(result, '$'))
	{
		free(*result);
		return (NULL);
	}
	return (*result);
}

char *expand_hd(t_minishell *m, char *str)
{
    char *result;
    size_t i;

    i = 0;
    result = ft_strdup("");
    if (!result)
        return NULL;
    while (str[i]) {
        if (str[i] == '$' && str[i + 1] == '?') {
            if (!expand_exit_status(m, &result)) {
                free(result);  // Fügen Sie diese Zeile hinzu
                return NULL;
            }
            i++;
        } else if (str[i] == '$' && !expand_var(m, str, &i, &result)) {
            free(result);  // Fügen Sie diese Zeile hinzu
            return NULL;
        } else if (str[i] != '"' && !append_char(&result, str[i])) {
            free(result);  // Fügen Sie diese Zeile hinzu
            return NULL;
        }
        i++;
    }
    return result;
}


#include "./../../include/minishell.h"

